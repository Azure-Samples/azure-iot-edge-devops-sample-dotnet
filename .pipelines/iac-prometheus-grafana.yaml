name: AKS cluster with Prometheus and Grafana

variables:
  - group: monitoring-iac

trigger: none
pr: none

stages :        
  - stage: terraform_plan
    jobs:
    - job: Terraform_Plan
      displayName: TerraForm_Plan
      pool: 
        vmImage: 'Ubuntu-latest'
      steps:
        - checkout: self            
        - task: TerraformInstaller@0
          inputs:
              terraformVersion: 'latest'
        - task: AzureCLI@2
          displayName: Check Terraform Version
          inputs:
            azureSubscription: $(AZURE_RESOURCE_MANAGER_CONNECTION_NAME)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              terraform version         
            
        - task: Bash@3
          displayName: Create Terrafrom Plan
          inputs:
            workingDirectory: $(System.DefaultWorkingDirectory)/iac/k8s-prom-grafana
            targetType: 'inline'          
            script: |
                az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID --subscription ARM_SUBSCRIPTION_ID
                
                echo '#######Terraform Init########'
                terraform init \
                -backend-config='resource_group_name=$(RG_NAME)' \
                -backend-config='storage_account_name=$(tf-remote-state-storage-account)' \
                -backend-config='container_name=$(tf-remote-state-storage-container)' \
                -backend-config='key=terraform.tfstate'
                
                echo '#######Terraform Plan########'
                terraform plan -out="out.plan" -refresh=false \
                -var git_repo_user_name=$(GIT_USER) \
                -var git_repo_token=$GIT_TOKEN \
                -var aks_name=$(AKS_NAME) \
                -var resource_group_name=$(RG_NAME) \
                -var url=$(FLUX_REPO) \
                -var branch=$(FLUX_BRANCH)

          env:
            ARM_CLIENT_ID: $(ARM_CLIENT_ID) 
            ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
            ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
            ARM_TENANT_ID: $(ARM_TENANT_ID)
            GIT_TOKEN: $(GIT_TOKEN)
              
            
        - task: ArchiveFiles@2
          displayName: 'Create Plan Artifact'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/iac/k8s-prom-grafana'
            includeRootFolder: false
            archiveType: 'tar'
            tarCompression: 'gz'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tgz'
            replaceExistingArchive: true

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Plan Artifact'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: '$(Build.BuildId)-tfplan'
            publishLocation: 'Container'

  - stage: terraform_apply
    jobs:
    - deployment: TerraForm_Apply
      environment: dev
      displayName: TerraForm_Apply
      pool: 
        vmImage: 'Ubuntu-latest'
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: none
            - task: TerraformInstaller@0
              inputs:
                  terraformVersion: 'latest'
            - task: AzureCLI@2
              displayName: Check Terraform Version 
              inputs:
                azureSubscription: $(AZURE_RESOURCE_MANAGER_CONNECTION_NAME)
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  terraform version         
                addSpnToEnvironment: true

            - task: DownloadBuildArtifacts@0
              displayName: 'Download Plan Artifact'
              inputs:
               artifactName: '$(Build.BuildId)-tfplan'
           
            - task: ExtractFiles@1
              displayName: 'Extract Terraform Plan Artifact'            
              inputs:
                archiveFilePatterns: '$(System.ArtifactsDirectory)/$(Build.BuildId)-tfplan/$(Build.BuildId).tgz'
                destinationFolder: '$(System.DefaultWorkingDirectory)/'
                cleanDestinationFolder: false
                
            - task: Bash@3
              displayName: Terrafrom Apply
              inputs:
                targetType: 'inline'
                script: |
                    az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID

                    echo '#######Terraform Init########'
                    terraform init \
                    -backend-config='resource_group_name=$(RG_NAME)' \
                    -backend-config='storage_account_name=$(tf-remote-state-storage-account)' \
                    -backend-config='container_name=$(tf-remote-state-storage-container)' \
                    -backend-config='key=terraform.tfstate'
                    
                    # echo '#######Terraform Apply########'
                    terraform apply out.plan
              env:
                ARM_CLIENT_ID: $(ARM_CLIENT_ID) 
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
                ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
                ARM_TENANT_ID: $(ARM_TENANT_ID)    
